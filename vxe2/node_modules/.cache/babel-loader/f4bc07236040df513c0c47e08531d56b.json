{"ast":null,"code":"var _jsxFileName = \"/Users/rdowler/Documents/myScripts/apps/vxe-tests/vxe2/src/App.js\";\n// import logo from './logo.svg';\n// import './App.css';\n// import React from 'react';\n// import VxeLayout from './Components/Journals/JournalsLayout';\n// function App() {\n//   return (\n//    <VxeLayout />\n//   );\n// } \n// export default App;\nimport React from 'react';\nimport { Route } from 'react-router-dom';\nimport Journals from './components/journals/JournalsLayout.js';\nimport { getToken, validateToken, decodeToken } from './utils/authMethods'; //import TokenModal from './components/journals/modals/token-modal';\n//import Loading from './components/journals/loading/spinningCircle';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isValidatingToken: true,\n      isTokenValid: false,\n      userData: {},\n      errMessage: '',\n      permissions: {},\n      isChrome: !!window.chrome,\n      browserValHeader: 'Browser Not Support',\n      browserValBody: 'Please use Google Chrome as the browser for making corrections to your proofs through Lanstad (our online portal).',\n      browserValBody2: 'Please note that our online editor, VXE, is better supported in Chrome which enables complete access to all inbuilt features & functionalities.'\n    };\n  }\n\n  async manageToken() {\n    let isTokenValid = false;\n    let userData = {};\n    let permissions = {};\n    let errMessage = {\n      header: 'Unauthorized access'\n    };\n    let token = '';\n\n    const getStateDataFromToken = async tokenValue => {\n      isTokenValid = await validateToken(tokenValue);\n\n      if (isTokenValid === true) {\n        const decodifiedToken = decodeToken(tokenValue);\n\n        if (decodifiedToken.user) {\n          userData = decodifiedToken;\n          permissions = decodifiedToken.user.permissions.permissionsMapped ? decodifiedToken.user.permissions.permissionsMapped.vxe : {};\n          permissions['oup'] = decodifiedToken.user.permissions.permissionsMapped ? decodifiedToken.user.permissions.permissionsMapped.oup : false;\n          errMessage = '';\n        } else {\n          errMessage = {\n            body: 'You may be experiencing network connectivity issues. Please, try again later.'\n          };\n          isTokenValid = false;\n        }\n      } else if (isTokenValid !== false) {\n        errMessage = {\n          body: 'You may be experiencing network connectivity issues. Please, try again later.'\n        };\n        isTokenValid = false;\n      }\n    };\n\n    if (window.location !== window.parent.location) {\n      // Ask parent for magic code\n      window.parent.postMessage('getMagicCode', '*');\n      window.parent.postMessage('setToken', '*');\n\n      const messageHandler = async event => {\n        const {\n          action,\n          key,\n          value\n        } = event.data;\n\n        if (action == 'set') {\n          window.localStorage.setItem(key, value);\n          token = value;\n\n          if (token) {\n            await getStateDataFromToken(token);\n          }\n\n          this.setState({\n            isTokenValid,\n            isValidatingToken: false,\n            userData,\n            permissions,\n            errMessage\n          });\n        } else if (action == 'remove') {\n          window.localStorage.removeItem(key);\n        }\n      };\n\n      window.addEventListener('message', messageHandler, false);\n    } else {\n      token = getToken();\n\n      if (token) {\n        await getStateDataFromToken(token);\n      }\n\n      this.setState({\n        isTokenValid,\n        isValidatingToken: false,\n        userData,\n        permissions,\n        errMessage\n      });\n    }\n  }\n\n  componentDidMount() {\n    this.manageToken();\n  }\n\n  render() {\n    const {\n      isChrome\n    } = this.state;\n\n    if (this.state.isValidatingToken === true) {\n      //return <Loading loadingText={'Loading...'} />;\n      return /*#__PURE__*/React.createElement(React.Fragment, null, \" \");\n    } else {\n      return this.state.isTokenValid && this.state.permissions.view ? /*#__PURE__*/React.createElement(Route, {\n        exact: true,\n        path: \"/vxe/:ProjectId/:ChapterId\",\n        component: props => /*#__PURE__*/React.createElement(Journals, Object.assign({}, props, {\n          userData: this.state.userData.user,\n          permissions: this.state.permissions,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 13\n          }\n        })),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 9\n        }\n      }) : /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 9\n        }\n      }, \"yyyyyyyyyyy\") // <TokenModal\n      //   modalHeader={this.state.errMessage.header}\n      //   modalBody={this.state.errMessage.body}\n      // />\n      ;\n    }\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/rdowler/Documents/myScripts/apps/vxe-tests/vxe2/src/App.js"],"names":["React","Route","Journals","getToken","validateToken","decodeToken","App","Component","constructor","props","state","isValidatingToken","isTokenValid","userData","errMessage","permissions","isChrome","window","chrome","browserValHeader","browserValBody","browserValBody2","manageToken","header","token","getStateDataFromToken","tokenValue","decodifiedToken","user","permissionsMapped","vxe","oup","body","location","parent","postMessage","messageHandler","event","action","key","value","data","localStorage","setItem","setState","removeItem","addEventListener","componentDidMount","render","view"],"mappings":"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","sourcesContent":["// import logo from './logo.svg';\n// import './App.css';\n// import React from 'react';\n// import VxeLayout from './Components/Journals/JournalsLayout';\n\n// function App() {\n//   return (\n//    <VxeLayout />\n//   );\n// } \n\n// export default App;\n\nimport React from 'react';\nimport { Route } from 'react-router-dom';\nimport Journals from './components/journals/JournalsLayout.js';\nimport { getToken, validateToken, decodeToken } from './utils/authMethods';\n//import TokenModal from './components/journals/modals/token-modal';\n//import Loading from './components/journals/loading/spinningCircle';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isValidatingToken: true,\n      isTokenValid: false,\n      userData: {},\n      errMessage: '',\n      permissions: {},\n      isChrome: !!window.chrome,\n      browserValHeader: 'Browser Not Support',\n      browserValBody:\n        'Please use Google Chrome as the browser for making corrections to your proofs through Lanstad (our online portal).',\n      browserValBody2:\n        'Please note that our online editor, VXE, is better supported in Chrome which enables complete access to all inbuilt features & functionalities.',\n    };\n  }\n\n  async manageToken() {\n    let isTokenValid = false;\n    let userData = {};\n    let permissions = {};\n    let errMessage = { header: 'Unauthorized access' };\n    let token = '';\n\n    const getStateDataFromToken = async (tokenValue) => {\n      isTokenValid = await validateToken(tokenValue);\n      if (isTokenValid === true) {\n        const decodifiedToken = decodeToken(tokenValue);\n        if (decodifiedToken.user) {\n          userData = decodifiedToken;\n          permissions = decodifiedToken.user.permissions.permissionsMapped\n            ? decodifiedToken.user.permissions.permissionsMapped.vxe\n            : {};\n          permissions['oup'] = decodifiedToken.user.permissions\n            .permissionsMapped\n            ? decodifiedToken.user.permissions.permissionsMapped.oup\n            : false;\n          errMessage = '';\n        } else {\n          errMessage = {\n            body: 'You may be experiencing network connectivity issues. Please, try again later.',\n          };\n          isTokenValid = false;\n        }\n      } else if (isTokenValid !== false) {\n        errMessage = {\n          body: 'You may be experiencing network connectivity issues. Please, try again later.',\n        };\n        isTokenValid = false;\n      }\n    };\n\n    if (window.location !== window.parent.location) {\n      // Ask parent for magic code\n      window.parent.postMessage('getMagicCode', '*');\n      window.parent.postMessage('setToken', '*');\n\n      const messageHandler = async (event) => {\n        const { action, key, value } = event.data;\n\n        if (action == 'set') {\n          window.localStorage.setItem(key, value);\n          token = value;\n          if (token) {\n            await getStateDataFromToken(token);\n          }\n          this.setState({\n            isTokenValid,\n            isValidatingToken: false,\n            userData,\n            permissions,\n            errMessage,\n          });\n        } else if (action == 'remove') {\n          window.localStorage.removeItem(key);\n        }\n      };\n      window.addEventListener('message', messageHandler, false);\n    } else {\n      token = getToken();\n      if (token) {\n        await getStateDataFromToken(token);\n      }\n      this.setState({\n        isTokenValid,\n        isValidatingToken: false,\n        userData,\n        permissions,\n        errMessage,\n      });\n    }\n  }\n\n  componentDidMount() {\n    this.manageToken();\n  }\n\n  render() {\n    const { isChrome } = this.state;\n\n    if (this.state.isValidatingToken === true) {\n      //return <Loading loadingText={'Loading...'} />;\n      return <> </>;\n    } else {\n      return this.state.isTokenValid && this.state.permissions.view ? (\n        <Route\n          exact\n          path=\"/vxe/:ProjectId/:ChapterId\"\n          component={(props) => (\n            <Journals\n              {...props}\n              userData={this.state.userData.user}\n              permissions={this.state.permissions}\n            />\n          )}\n        />\n      ) : (\n        <div>yyyyyyyyyyy</div>\n        // <TokenModal\n        //   modalHeader={this.state.errMessage.header}\n        //   modalBody={this.state.errMessage.body}\n        // />\n      );\n    }\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}