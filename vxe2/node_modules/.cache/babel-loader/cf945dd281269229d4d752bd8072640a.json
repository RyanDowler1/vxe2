{"ast":null,"code":"import jwt from 'jwt-decode';\nexport function getToken() {\n  return window.localStorage.getItem(\"lanstad-token\");\n}\nexport async function validateToken(token = getToken()) {\n  if (token) {\n    return await fetch('https://api.stg-lanstad.com/token/check', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'Lanstad-Token': token\n      }\n    }).then(response => {\n      return response.json();\n    }).then(data => {\n      if (data.hasOwnProperty('valid')) {\n        return data.valid;\n      } else {\n        return false;\n      }\n    }).catch(err => {\n      console.log(\"error\", err);\n      return false;\n    });\n  } else {\n    return false;\n  }\n}\nexport function decodeToken(token = getToken()) {\n  if (token) {\n    const decodedToken = jwt(token);\n    return decodedToken;\n  } else {\n    const errorObject = {};\n    return errorObject;\n  }\n} // we are not setting the token in vxe, this function will go to the login page in the future\n\nexport async function setToken(username, password) {\n  await fetch('https://api.stg-lanstad.com/token/create', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      username,\n      password\n    })\n  }).then(response => {\n    return response.json();\n  }).then(data => {\n    if (data.token) {\n      window.localStorage.setItem(\"lanstad-token\", data.token);\n    } else {//We have to settle which response errors might be and how to manage them.\n    }\n  }).catch(err => {\n    console.log(\"error\", err); //We have to settle which response errors might be and how to manage them.\n  });\n}","map":{"version":3,"sources":["/Users/rdowler/Documents/myScripts/apps/vxe-tests/vxe2/src/utils/authMethods.js"],"names":["jwt","getToken","window","localStorage","getItem","validateToken","token","fetch","method","headers","then","response","json","data","hasOwnProperty","valid","catch","err","console","log","decodeToken","decodedToken","errorObject","setToken","username","password","body","JSON","stringify","setItem"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,YAAhB;AAEA,OAAQ,SAASC,QAAT,GAAmB;AACvB,SAAOC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,eAA5B,CAAP;AACH;AAED,OAAO,eAAeC,aAAf,CAA6BC,KAAK,GAACL,QAAQ,EAA3C,EAA8C;AAEjD,MAAGK,KAAH,EAAS;AACL,WAAO,MAAMC,KAAK,CAAC,yCAAD,EAA4C;AAC1DC,MAAAA,MAAM,EAAE,KADkD;AAE1DC,MAAAA,OAAO,EAAE;AACP,wBAAgB,kBADT;AAEP,yBAAiBH;AAFV;AAFiD,KAA5C,CAAL,CAMRI,IANQ,CAMFC,QAAD,IAAc;AACpB,aAAOA,QAAQ,CAACC,IAAT,EAAP;AACD,KARU,EASVF,IATU,CASJG,IAAD,IAAU;AACZ,UAAGA,IAAI,CAACC,cAAL,CAAoB,OAApB,CAAH,EAAgC;AAC5B,eAAOD,IAAI,CAACE,KAAZ;AACH,OAFD,MAEO;AACH,eAAO,KAAP;AACH;AACJ,KAfU,EAeRC,KAfQ,CAeFC,GAAG,IAAE;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBF,GAArB;AACA,aAAO,KAAP;AACD,KAlBU,CAAb;AAmBH,GApBD,MAoBO;AACH,WAAO,KAAP;AACH;AAEJ;AAED,OAAO,SAASG,WAAT,CAAqBd,KAAK,GAACL,QAAQ,EAAnC,EAAsC;AACzC,MAAGK,KAAH,EAAS;AACT,UAAMe,YAAY,GAAGrB,GAAG,CAACM,KAAD,CAAxB;AACA,WAAOe,YAAP;AACC,GAHD,MAGK;AACD,UAAMC,WAAW,GAAG,EAApB;AACA,WAAOA,WAAP;AACH;AACJ,C,CAED;;AACA,OAAO,eAAeC,QAAf,CAAwBC,QAAxB,EAAkCC,QAAlC,EAA2C;AAC9C,QAAMlB,KAAK,CAAC,0CAAD,EAA6C;AACpDC,IAAAA,MAAM,EAAE,MAD4C;AAEpDC,IAAAA,OAAO,EAAE;AACL,sBAAgB;AADX,KAF2C;AAKpDiB,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAACJ,MAAAA,QAAD;AAAWC,MAAAA;AAAX,KAAf;AAL8C,GAA7C,CAAL,CAMHf,IANG,CAMGC,QAAD,IAAc;AAClB,WAAOA,QAAQ,CAACC,IAAT,EAAP;AACH,GARK,EAQHF,IARG,CAQGG,IAAD,IAAU;AACd,QAAGA,IAAI,CAACP,KAAR,EAAc;AACVJ,MAAAA,MAAM,CAACC,YAAP,CAAoB0B,OAApB,CAA4B,eAA5B,EAA6ChB,IAAI,CAACP,KAAlD;AACH,KAFD,MAEO,CACH;AACH;AAEJ,GAfK,EAeHU,KAfG,CAeGC,GAAG,IAAE;AACVC,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBF,GAArB,EADU,CAEV;AACH,GAlBK,CAAN;AAmBH","sourcesContent":["import jwt from 'jwt-decode';\n\nexport  function getToken(){\n    return window.localStorage.getItem(\"lanstad-token\");\n}\n\nexport async function validateToken(token=getToken()){\n    \n    if(token){\n        return await fetch('https://api.stg-lanstad.com/token/check', {\n            method: 'GET',\n            headers: {\n              'Content-Type': 'application/json',\n              'Lanstad-Token': token\n            }\n          }).then((response) => {\n            return response.json();\n          })\n          .then((data) => {\n              if(data.hasOwnProperty('valid')){\n                  return data.valid;\n              } else {\n                  return false;\n              }\n          }).catch(err=>{\n            console.log(\"error\", err)\n            return false;\n          })\n    } else {\n        return false\n    }\n    \n}\n\nexport function decodeToken(token=getToken()){\n    if(token){\n    const decodedToken = jwt(token);\n    return decodedToken;\n    }else{\n        const errorObject = {};\n        return errorObject;\n    }\n}\n\n// we are not setting the token in vxe, this function will go to the login page in the future\nexport async function setToken(username, password){\n    await fetch('https://api.stg-lanstad.com/token/create', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({username, password})\n    }).then((response) => {\n        return response.json();\n    }).then((data) => {\n        if(data.token){\n            window.localStorage.setItem(\"lanstad-token\", data.token);\n        } else {\n            //We have to settle which response errors might be and how to manage them.\n        }\n        \n    }).catch(err=>{\n        console.log(\"error\", err)\n        //We have to settle which response errors might be and how to manage them.\n    })\n}"]},"metadata":{},"sourceType":"module"}