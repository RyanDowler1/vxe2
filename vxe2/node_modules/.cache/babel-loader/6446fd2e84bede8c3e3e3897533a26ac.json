{"ast":null,"code":"var _jsxFileName = \"/Users/rdowler/Documents/myScripts/apps/vxe-tests/vxe2/src/Components/Journals/overviewTool/SearchResultComp.js\";\nimport React from 'react';\nimport $ from 'jquery';\n\nclass SearchResultComp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showReplace: false\n    };\n  }\n\n  componentDidMount() {}\n\n  componentWillReceiveProps(prevProps) {\n    if (prevProps.replaceChecked === true) {\n      this.setState({\n        showReplace: true\n      });\n    }\n\n    if (prevProps.tiggerReplaceAll === true) {\n      this.replaceAllFormattedTxt();\n    }\n  }\n\n  replaceAllFormattedTxt() {\n    let replaceList = document.getElementById('search-result-id');\n    replaceList = replaceList.getElementsByClassName('result-row');\n    Array.from(replaceList).forEach((data, index) => {\n      this.singleReplace(data, 'find-res-' + index, true);\n    });\n    this.props.resetState();\n    window.autosavefunction_vxe();\n  }\n\n  singleReplace(e, selId, isReplaceAll) {\n    let selFindFilter = this.props.selAdvanceFind;\n    let selReplaceFilter = this.props.selAdvanceReplace;\n    let findTag;\n\n    switch (selFindFilter) {\n      case 'bold_character':\n        findTag = 'b';\n        break;\n\n      case 'italic_character':\n        findTag = 'i';\n        break;\n    }\n\n    let replaceTag;\n\n    switch (selReplaceFilter) {\n      case 'bold_characterrep':\n        replaceTag = 'b';\n        break;\n\n      case 'italic_characterrep':\n        replaceTag = 'i';\n        break;\n    }\n\n    if (findTag !== replaceTag) {\n      let findNode = document.getElementById(selId);\n\n      if (!!findNode) {\n        let selHtml = document.getElementById(selId).innerHTML;\n        let replaceNode = document.createElement(replaceTag);\n        replaceNode.innerHTML = selHtml;\n        Array.from(document.getElementById(selId).attributes).forEach(data => {\n          replaceNode.setAttribute(data.name, data.value);\n        });\n        let findParNode = document.getElementById(selId).parentNode;\n        findParNode.replaceChild(replaceNode, findNode);\n        replaceNode.classList.remove('find-res-cls', 'add-highlights');\n        replaceNode.removeAttribute('id');\n\n        if (!isReplaceAll) {\n          e.target.closest('.result-row').remove();\n          window.autosavefunction_vxe();\n        }\n      }\n    }\n  }\n\n  render() {\n    if (!!this.props.findFormatResults && this.props.findFormatResults.length > 0) {\n      document.getElementsByClassName(\"btn-clear\")[0].classList.remove('hide');\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"searchCount\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 13\n        }\n      }, \"Matches \", this.props.findFormatResults.length), this.props.findFormatResults.map((data, index) => {\n        data.classList.add('add-highlights');\n        data.classList.add('find-res-cls');\n        data.setAttribute('id', 'find-res-' + index);\n\n        if (data.innerText !== \"\") {\n          let formatStyle;\n\n          switch (data.tagName) {\n            case \"B\":\n              formatStyle = \"bold_res\";\n              break;\n\n            case \"I\":\n              formatStyle = \"italic_res\";\n              break;\n\n            case \"U\":\n              formatStyle = \"underLine_res\";\n              break;\n          }\n\n          return /*#__PURE__*/React.createElement(\"p\", {\n            onClick: () => window.scrollToViewContent('find-res-' + index),\n            className: \"result-row \" + formatStyle,\n            key: index,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 17\n            }\n          }, /*#__PURE__*/React.createElement(\"span\", {\n            className: \"searched-txt\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 21\n            }\n          }, data.innerText), this.state.showReplace && /*#__PURE__*/React.createElement(\"span\", {\n            onClick: e => this.singleReplace(e, 'find-res-' + index, false),\n            className: \"replaceText_only\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 21\n            }\n          }, /*#__PURE__*/React.createElement(\"i\", {\n            className: \"fa fa-random find-replace-btn pl-2\",\n            title: \"Replace\",\n            \"aria-hidden\": \"true\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 25\n            }\n          })));\n        }\n      }));\n    } else {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"find-no-result\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 13\n        }\n      }, \"No Results Found\"));\n    }\n  }\n\n}\n\nexport default SearchResultComp;","map":{"version":3,"sources":["/Users/rdowler/Documents/myScripts/apps/vxe-tests/vxe2/src/Components/Journals/overviewTool/SearchResultComp.js"],"names":["React","$","SearchResultComp","Component","constructor","props","state","showReplace","componentDidMount","componentWillReceiveProps","prevProps","replaceChecked","setState","tiggerReplaceAll","replaceAllFormattedTxt","replaceList","document","getElementById","getElementsByClassName","Array","from","forEach","data","index","singleReplace","resetState","window","autosavefunction_vxe","e","selId","isReplaceAll","selFindFilter","selAdvanceFind","selReplaceFilter","selAdvanceReplace","findTag","replaceTag","findNode","selHtml","innerHTML","replaceNode","createElement","attributes","setAttribute","name","value","findParNode","parentNode","replaceChild","classList","remove","removeAttribute","target","closest","render","findFormatResults","length","map","add","innerText","formatStyle","tagName","scrollToViewContent"],"mappings":"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","sourcesContent":["import React from 'react';\nimport $ from 'jquery';\n\nclass SearchResultComp extends React.Component {\n    constructor(props) {                \n        super(props);        \n        this.state = {  \n            showReplace : false\n        }                        \n    }\n\n    componentDidMount() {\n    }\n\n    componentWillReceiveProps(prevProps) {        \n        if(prevProps.replaceChecked === true){\n            this.setState({showReplace: true});            \n        }\n        if(prevProps.tiggerReplaceAll === true){\n            this.replaceAllFormattedTxt();\n        }        \n    }\n\n    replaceAllFormattedTxt(){                        \n        let replaceList = document.getElementById('search-result-id');\n        replaceList = replaceList.getElementsByClassName('result-row');\n        Array.from(replaceList).forEach((data, index) => {            \n            this.singleReplace(data,'find-res-'+index, true);\n        })        \n        this.props.resetState();\n        window.autosavefunction_vxe();\n    }\n\n    singleReplace(e, selId, isReplaceAll) {\n        let selFindFilter = this.props.selAdvanceFind;\n        let selReplaceFilter = this.props.selAdvanceReplace;\n        let findTag;\n        switch(selFindFilter){\n            case 'bold_character':\n                findTag = 'b';\n                break;\n            case 'italic_character':\n                findTag = 'i';\n                break;\n        }\n\n        let replaceTag;\n        switch(selReplaceFilter){\n            case 'bold_characterrep':\n                replaceTag = 'b';\n                break;\n            case 'italic_characterrep':\n                replaceTag = 'i';\n                break;\n        }        \n        \n        if(findTag !== replaceTag){\n            let findNode = document.getElementById(selId);\n            if(!(!findNode)){                \n                let selHtml = document.getElementById(selId).innerHTML;\n                let replaceNode = document.createElement(replaceTag);\n                replaceNode.innerHTML = selHtml;\n                Array.from(document.getElementById(selId).attributes).forEach( (data) => {\n                    replaceNode.setAttribute(data.name, data.value);\n                });\n                let findParNode = document.getElementById(selId).parentNode;\n                findParNode.replaceChild(replaceNode, findNode);\n                replaceNode.classList.remove('find-res-cls', 'add-highlights');\n                replaceNode.removeAttribute('id');                \n                if(!isReplaceAll){\n                    e.target.closest('.result-row').remove();\n                    window.autosavefunction_vxe();\n                }\n            }\n        }\n    }\n\n    render() {          \n        if(!(!this.props.findFormatResults) && this.props.findFormatResults.length > 0){\n            document.getElementsByClassName(\"btn-clear\")[0].classList.remove('hide');\n            return (\n            <>\n            <div className=\"searchCount\">Matches {this.props.findFormatResults.length}</div>\n            {this.props.findFormatResults.map((data, index) => {\n                data.classList.add('add-highlights');\n                data.classList.add('find-res-cls');\n                data.setAttribute('id','find-res-'+index);\n                if(data.innerText !== \"\"){\n                    let formatStyle;\n                    switch(data.tagName) {\n                    case \"B\":\n                        formatStyle = \"bold_res\";\n                        break;\n                    case \"I\":\n                        formatStyle = \"italic_res\";\n                        break;\n                    case \"U\":\n                        formatStyle = \"underLine_res\";\n                        break;\n                    }\n                return(\n                <p onClick={() => window.scrollToViewContent('find-res-'+index)} className={\"result-row \" + formatStyle} key={index}>\n                    <span className=\"searched-txt\">\n                        {data.innerText}\n                    </span>\n                    {this.state.showReplace &&\n                    <span onClick={(e) => this.singleReplace(e, 'find-res-'+index, false)} className=\"replaceText_only\">\n                        <i className=\"fa fa-random find-replace-btn pl-2\" title=\"Replace\" aria-hidden=\"true\"></i>                        \n                    </span>\n                    }\n                </p>\n                );\n                }\n            })}\n            </>\n            )\n        } else {\n            return(\n            <div className=\"find-no-result\">\n            <p>No Results Found</p>\n            </div>\n            );\n        }\n    }\n}\n\nexport default SearchResultComp;"]},"metadata":{},"sourceType":"module"}